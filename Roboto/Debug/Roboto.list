
Roboto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d0c  08005d0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08005d20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005d20  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013faa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023fd  00000000  00000000  00034029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00036428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e41  00000000  00000000  00037650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bdd  00000000  00000000  00038491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142ab  00000000  00000000  0006006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101cde  00000000  00000000  00074319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e6c  00000000  00000000  00175ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ca4 	.word	0x08005ca4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ca4 	.word	0x08005ca4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	running = 0;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <main+0x50>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fd4f 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f821 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9ff 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f99d 	bl	8000818 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004de:	f000 f86d 	bl	80005bc <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e2:	f000 f8e1 	bl	80006a8 <MX_TIM2_Init>
  MX_TIM6_Init();
 80004e6:	f000 f961 	bl	80007ac <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f9c5 	bl	8000878 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (running) {
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <main+0x50>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d006      	beq.n	8000506 <main+0x42>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2120      	movs	r1, #32
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f002 fabe 	bl	8002a80 <HAL_GPIO_WritePin>
 8000504:	e7f3      	b.n	80004ee <main+0x2a>
	  }
	  else{
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f002 fab7 	bl	8002a80 <HAL_GPIO_WritePin>
	  if (running) {
 8000512:	e7ec      	b.n	80004ee <main+0x2a>
 8000514:	20000234 	.word	0x20000234

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f005 fb8f 	bl	8005c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f002 fadd 	bl	8002afc <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 fa68 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000554:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2310      	movs	r3, #16
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000562:	2301      	movs	r3, #1
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000566:	230a      	movs	r3, #10
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fb14 	bl	8002ba8 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000586:	f000 fa49 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2104      	movs	r1, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fedc 	bl	8003360 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ae:	f000 fa35 	bl	8000a1c <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	; 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_ADC1_Init+0xe0>)
 80005e0:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <MX_ADC1_Init+0xe4>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e4:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <MX_ADC1_Init+0xe0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <MX_ADC1_Init+0xe0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_ADC1_Init+0xe0>)
 80005fe:	2204      	movs	r2, #4
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_ADC1_Init+0xe0>)
 8000604:	2200      	movs	r2, #0
 8000606:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_ADC1_Init+0xe0>)
 8000610:	2201      	movs	r2, #1
 8000612:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ADC1_Init+0xe0>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_ADC1_Init+0xe0>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC1_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_ADC1_Init+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC1_Init+0xe0>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <MX_ADC1_Init+0xe0>)
 8000640:	f000 fee0 	bl	8001404 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800064a:	f000 f9e7 	bl	8000a1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4619      	mov	r1, r3
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <MX_ADC1_Init+0xe0>)
 800065a:	f001 fea5 	bl	80023a8 <HAL_ADCEx_MultiModeConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000664:	f000 f9da 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066c:	2306      	movs	r3, #6
 800066e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000670:	2307      	movs	r3, #7
 8000672:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000674:	237f      	movs	r3, #127	; 0x7f
 8000676:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000678:	2304      	movs	r3, #4
 800067a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC1_Init+0xe0>)
 8000686:	f001 fa45 	bl	8001b14 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000690:	f000 f9c4 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	50040000 	.word	0x50040000
 80006a4:	3ef08000 	.word	0x3ef08000

080006a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <MX_TIM2_Init+0x100>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6-1;
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <MX_TIM2_Init+0x100>)
 80006e4:	2205      	movs	r2, #5
 80006e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MX_TIM2_Init+0x100>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <MX_TIM2_Init+0x100>)
 80006f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_TIM2_Init+0x100>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_TIM2_Init+0x100>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000702:	4829      	ldr	r0, [pc, #164]	; (80007a8 <MX_TIM2_Init+0x100>)
 8000704:	f003 fd0c 	bl	8004120 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800070e:	f000 f985 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071c:	4619      	mov	r1, r3
 800071e:	4822      	ldr	r0, [pc, #136]	; (80007a8 <MX_TIM2_Init+0x100>)
 8000720:	f003 ffcc 	bl	80046bc <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800072a:	f000 f977 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800072e:	481e      	ldr	r0, [pc, #120]	; (80007a8 <MX_TIM2_Init+0x100>)
 8000730:	f003 fd4d 	bl	80041ce <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800073a:	f000 f96f 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4816      	ldr	r0, [pc, #88]	; (80007a8 <MX_TIM2_Init+0x100>)
 800074e:	f004 fcbb 	bl	80050c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000758:	f000 f960 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_TIM2_Init+0x100>)
 8000774:	f003 fe8e 	bl	8004494 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800077e:	f000 f94d 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	220c      	movs	r2, #12
 8000786:	4619      	mov	r1, r3
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <MX_TIM2_Init+0x100>)
 800078a:	f003 fe83 	bl	8004494 <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000794:	f000 f942 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <MX_TIM2_Init+0x100>)
 800079a:	f000 fa4d 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 800079e:	bf00      	nop
 80007a0:	3738      	adds	r7, #56	; 0x38
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000008c 	.word	0x2000008c

080007ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_TIM6_Init+0x64>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_TIM6_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2-1;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_TIM6_Init+0x64>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_TIM6_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_TIM6_Init+0x64>)
 80007d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_TIM6_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_TIM6_Init+0x64>)
 80007de:	f003 fc9f 	bl	8004120 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007e8:	f000 f918 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_TIM6_Init+0x64>)
 80007fa:	f004 fc65 	bl	80050c8 <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f90a 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000d8 	.word	0x200000d8
 8000814:	40001000 	.word	0x40001000

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART2_UART_Init+0x54>)
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115300;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x54>)
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_USART2_UART_Init+0x5c>)
 8000826:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USART2_UART_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_USART2_UART_Init+0x54>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x54>)
 800083c:	220c      	movs	r2, #12
 800083e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_USART2_UART_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_USART2_UART_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_USART2_UART_Init+0x54>)
 800085a:	f004 fcdb 	bl	8005214 <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000864:	f000 f8da 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000124 	.word	0x20000124
 8000870:	40004400 	.word	0x40004400
 8000874:	0001c264 	.word	0x0001c264

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART3_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008bc:	f004 fcaa 	bl	8005214 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f8a9 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001ac 	.word	0x200001ac
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <MX_GPIO_Init+0x100>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a39      	ldr	r2, [pc, #228]	; (80009d8 <MX_GPIO_Init+0x100>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <MX_GPIO_Init+0x100>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <MX_GPIO_Init+0x100>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a33      	ldr	r2, [pc, #204]	; (80009d8 <MX_GPIO_Init+0x100>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <MX_GPIO_Init+0x100>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_GPIO_Init+0x100>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <MX_GPIO_Init+0x100>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_GPIO_Init+0x100>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_GPIO_Init+0x100>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <MX_GPIO_Init+0x100>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x100>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f002 f893 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_devant_droite_Pin|LED_devant_gauche_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <MX_GPIO_Init+0x104>)
 8000962:	f002 f88d 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_GPIO_Init+0x108>)
 800097e:	f001 fed5 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000982:	2320      	movs	r3, #32
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f001 fec6 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_devant_droite_Pin LED_devant_gauche_Pin */
  GPIO_InitStruct.Pin = LED_devant_droite_Pin|LED_devant_gauche_Pin;
 80009a0:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_GPIO_Init+0x104>)
 80009ba:	f001 feb7 	bl	800272c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f001 fe7b 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c8:	2028      	movs	r0, #40	; 0x28
 80009ca:	f001 fe94 	bl	80026f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	48000800 	.word	0x48000800

080009e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
 if (GPIO_Pin == B1_Pin)
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009f4:	d10a      	bne.n	8000a0c <HAL_GPIO_EXTI_Callback+0x28>
	 running = !running;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x34>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf0c      	ite	eq
 8000a00:	2301      	moveq	r3, #1
 8000a02:	2300      	movne	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a0a:	701a      	strb	r2, [r3, #0]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000234 	.word	0x20000234

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6593      	str	r3, [r2, #88]	; 0x58
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0ae      	sub	sp, #184	; 0xb8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	2288      	movs	r2, #136	; 0x88
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f005 f8da 	bl	8005c4a <memset>
  if(hadc->Instance==ADC1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a47      	ldr	r2, [pc, #284]	; (8000bb8 <HAL_ADC_MspInit+0x148>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	f040 8086 	bne.w	8000bae <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000aa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fe68 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000ade:	f7ff ff9d 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a35      	ldr	r2, [pc, #212]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Capteur_devant_droite_Pin;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b48:	230b      	movs	r3, #11
 8000b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(Capteur_devant_droite_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f001 fde5 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Capteur_devant_gauche_Pin;
 8000b62:	2310      	movs	r3, #16
 8000b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(Capteur_devant_gauche_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <HAL_ADC_MspInit+0x150>)
 8000b7c:	f001 fdd6 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Tension_Batterie_Pin;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b86:	230b      	movs	r3, #11
 8000b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(Tension_Batterie_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b96:	4619      	mov	r1, r3
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <HAL_ADC_MspInit+0x154>)
 8000b9a:	f001 fdc7 	bl	800272c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2012      	movs	r0, #18
 8000ba4:	f001 fd8b 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ba8:	2012      	movs	r0, #18
 8000baa:	f001 fda4 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	37b8      	adds	r7, #184	; 0xb8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	50040000 	.word	0x50040000
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_TIM_Base_MspInit+0x68>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_TIM_Base_MspInit+0x68>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6593      	str	r3, [r2, #88]	; 0x58
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_TIM_Base_MspInit+0x68>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bf2:	e018      	b.n	8000c26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_TIM_Base_MspInit+0x6c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d113      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_TIM_Base_MspInit+0x68>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_TIM_Base_MspInit+0x68>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_TIM_Base_MspInit+0x68>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2036      	movs	r0, #54	; 0x36
 8000c1c:	f001 fd4f 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f001 fd68 	bl	80026f6 <HAL_NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40001000 	.word	0x40001000

08000c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d139      	bne.n	8000cce <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_TIM_MspPostInit+0xa0>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_TIM_MspPostInit+0xa0>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_TIM_MspPostInit+0xa0>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_TIM_MspPostInit+0xa0>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_TIM_MspPostInit+0xa0>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_TIM_MspPostInit+0xa0>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMG_Pin;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMG_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f001 fd40 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWMD_Pin;
 8000cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMD_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_TIM_MspPostInit+0xa4>)
 8000cca:	f001 fd2f 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ae      	sub	sp, #184	; 0xb8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2288      	movs	r2, #136	; 0x88
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 ffa2 	bl	8005c4a <memset>
  if(huart->Instance==USART2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a53      	ldr	r2, [pc, #332]	; (8000e58 <HAL_UART_MspInit+0x178>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d13c      	bne.n	8000d8a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fd43 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d28:	f7ff fe78 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2c:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d36:	6593      	str	r3, [r2, #88]	; 0x58
 8000d38:	4b48      	ldr	r3, [pc, #288]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	4a44      	ldr	r2, [pc, #272]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d50:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d74:	2307      	movs	r3, #7
 8000d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f001 fcd2 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d88:	e061      	b.n	8000e4e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <HAL_UART_MspInit+0x180>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d15c      	bne.n	8000e4e <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d94:	2304      	movs	r3, #4
 8000d96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 fd01 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000dac:	f7ff fe36 	bl	8000a1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	4a29      	ldr	r2, [pc, #164]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dba:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0x17c>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0x184>)
 8000e1e:	f001 fc85 	bl	800272c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <HAL_UART_MspInit+0x188>)
 8000e4a:	f001 fc6f 	bl	800272c <HAL_GPIO_Init>
}
 8000e4e:	bf00      	nop
 8000e50:	37b8      	adds	r7, #184	; 0xb8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40004800 	.word	0x40004800
 8000e64:	48000800 	.word	0x48000800
 8000e68:	48000400 	.word	0x48000400

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8b6 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <ADC1_2_IRQHandler+0x10>)
 8000ec6:	f000 fbed 	bl	80016a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000028 	.word	0x20000028

08000ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ed8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000edc:	f001 fde8 	bl	8002ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <TIM6_DAC_IRQHandler+0x10>)
 8000eea:	f003 f9d1 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000d8 	.word	0x200000d8

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f20:	f7ff ffea 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f004 fe87 	bl	8005c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f7ff fab9 	bl	80004c4 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f60:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 8000f64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f68:	2000023c 	.word	0x2000023c

08000f6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC3_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_Init+0x3c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_Init+0x3c>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f001 fb8e 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 f80f 	bl	8000fb0 <HAL_InitTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	e001      	b.n	8000fa2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f9e:	f7ff fd43 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d023      	beq.n	800100c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_InitTick+0x70>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_InitTick+0x6c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fb99 	bl	8002712 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10f      	bne.n	8001006 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d809      	bhi.n	8001000 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f001 fb63 	bl	80026be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_InitTick+0x74>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e004      	b.n	8001010 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e001      	b.n	8001010 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000238 	.word	0x20000238

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000238 	.word	0x20000238

08001068 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3360      	adds	r3, #96	; 0x60
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LL_ADC_SetOffset+0x44>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	4313      	orrs	r3, r2
 8001100:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	03fff000 	.word	0x03fff000

08001118 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3360      	adds	r3, #96	; 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3360      	adds	r3, #96	; 0x60
 8001154:	461a      	mov	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3330      	adds	r3, #48	; 0x30
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	4413      	add	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	211f      	movs	r1, #31
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0e9b      	lsrs	r3, r3, #26
 80011d8:	f003 011f 	and.w	r1, r3, #31
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	431a      	orrs	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800121e:	b480      	push	{r7}
 8001220:	b087      	sub	sp, #28
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3314      	adds	r3, #20
 800122e:	461a      	mov	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	0e5b      	lsrs	r3, r3, #25
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	0d1b      	lsrs	r3, r3, #20
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	2107      	movs	r1, #7
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	401a      	ands	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	0d1b      	lsrs	r3, r3, #20
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	431a      	orrs	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001268:	bf00      	nop
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0318 	and.w	r3, r3, #24
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001298:	40d9      	lsrs	r1, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	400b      	ands	r3, r1
 800129e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012a2:	431a      	orrs	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	0007ffff 	.word	0x0007ffff

080012bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 031f 	and.w	r3, r3, #31
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6093      	str	r3, [r2, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800132c:	d101      	bne.n	8001332 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800137c:	d101      	bne.n	8001382 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_IsEnabled+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_IsEnabled+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d101      	bne.n	80013ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d101      	bne.n	80013f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e130      	b.n	8001680 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fb1f 	bl	8000a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff67 	bl	8001318 <LL_ADC_IsDeepPowerDownEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff4d 	bl	80012f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff82 	bl	8001368 <LL_ADC_IsInternalRegulatorEnabled>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff66 	bl	8001340 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001474:	4b84      	ldr	r3, [pc, #528]	; (8001688 <HAL_ADC_Init+0x284>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	4a84      	ldr	r2, [pc, #528]	; (800168c <HAL_ADC_Init+0x288>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001488:	e002      	b.n	8001490 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3b01      	subs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff64 	bl	8001368 <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f043 0210 	orr.w	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff75 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 80014cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80c9 	bne.w	800166e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80c5 	bne.w	800166e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014ec:	f043 0202 	orr.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff49 	bl	8001390 <LL_ADC_IsEnabled>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d115      	bne.n	8001530 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001504:	4862      	ldr	r0, [pc, #392]	; (8001690 <HAL_ADC_Init+0x28c>)
 8001506:	f7ff ff43 	bl	8001390 <LL_ADC_IsEnabled>
 800150a:	4604      	mov	r4, r0
 800150c:	4861      	ldr	r0, [pc, #388]	; (8001694 <HAL_ADC_Init+0x290>)
 800150e:	f7ff ff3f 	bl	8001390 <LL_ADC_IsEnabled>
 8001512:	4603      	mov	r3, r0
 8001514:	431c      	orrs	r4, r3
 8001516:	4860      	ldr	r0, [pc, #384]	; (8001698 <HAL_ADC_Init+0x294>)
 8001518:	f7ff ff3a 	bl	8001390 <LL_ADC_IsEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	4323      	orrs	r3, r4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4619      	mov	r1, r3
 800152a:	485c      	ldr	r0, [pc, #368]	; (800169c <HAL_ADC_Init+0x298>)
 800152c:	f7ff fd9c 	bl	8001068 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7e5b      	ldrb	r3, [r3, #25]
 8001534:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001540:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001546:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d106      	bne.n	800156c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	3b01      	subs	r3, #1
 8001564:	045b      	lsls	r3, r3, #17
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	2b00      	cmp	r3, #0
 8001572:	d009      	beq.n	8001588 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <HAL_ADC_Init+0x29c>)
 8001590:	4013      	ands	r3, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	430b      	orrs	r3, r1
 800159a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff1b 	bl	80013dc <LL_ADC_INJ_IsConversionOngoing>
 80015a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d13d      	bne.n	800162a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d13a      	bne.n	800162a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d0:	f023 0302 	bic.w	r3, r3, #2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	69b9      	ldr	r1, [r7, #24]
 80015da:	430b      	orrs	r3, r1
 80015dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d118      	bne.n	800161a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015fe:	4311      	orrs	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001604:	4311      	orrs	r1, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800160a:	430a      	orrs	r2, r1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	e007      	b.n	800162a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10c      	bne.n	800164c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f023 010f 	bic.w	r1, r3, #15
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e007      	b.n	800165c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020f 	bic.w	r2, r2, #15
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	f023 0303 	bic.w	r3, r3, #3
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
 800166c:	e007      	b.n	800167e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800167e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3724      	adds	r7, #36	; 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	053e2d63 	.word	0x053e2d63
 8001690:	50040000 	.word	0x50040000
 8001694:	50040100 	.word	0x50040100
 8001698:	50040200 	.word	0x50040200
 800169c:	50040300 	.word	0x50040300
 80016a0:	fff0c007 	.word	0xfff0c007

080016a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016c0:	4882      	ldr	r0, [pc, #520]	; (80018cc <HAL_ADC_IRQHandler+0x228>)
 80016c2:	f7ff fdfb 	bl	80012bc <LL_ADC_GetMultimode>
 80016c6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d017      	beq.n	8001702 <HAL_ADC_IRQHandler+0x5e>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d012      	beq.n	8001702 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fe4d 	bl	8002394 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_ADC_IRQHandler+0x72>
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10a      	bne.n	800172c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8083 	beq.w	8001828 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d07d      	beq.n	8001828 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fd16 	bl	800117a <LL_ADC_REG_IsTriggerSourceSWStart>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d062      	beq.n	800181a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a5d      	ldr	r2, [pc, #372]	; (80018d0 <HAL_ADC_IRQHandler+0x22c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d002      	beq.n	8001764 <HAL_ADC_IRQHandler+0xc0>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	e000      	b.n	8001766 <HAL_ADC_IRQHandler+0xc2>
 8001764:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_ADC_IRQHandler+0x230>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4293      	cmp	r3, r2
 800176c:	d008      	beq.n	8001780 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d002      	beq.n	8001780 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b09      	cmp	r3, #9
 800177e:	d104      	bne.n	800178a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	e00c      	b.n	80017a4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_ADC_IRQHandler+0x22c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d002      	beq.n	800179a <HAL_ADC_IRQHandler+0xf6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	e000      	b.n	800179c <HAL_ADC_IRQHandler+0xf8>
 800179a:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <HAL_ADC_IRQHandler+0x230>)
 800179c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d135      	bne.n	800181a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d12e      	bne.n	800181a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fdf8 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11a      	bne.n	8001802 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020c 	bic.w	r2, r2, #12
 80017da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d112      	bne.n	800181a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001800:	e00b      	b.n	800181a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f95c 	bl	8001ad8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	220c      	movs	r2, #12
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_ADC_IRQHandler+0x198>
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10b      	bne.n	8001854 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 809f 	beq.w	8001986 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8099 	beq.w	8001986 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fcc1 	bl	80011f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001876:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc7c 	bl	800117a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001882:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_ADC_IRQHandler+0x22c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d002      	beq.n	8001894 <HAL_ADC_IRQHandler+0x1f0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	e000      	b.n	8001896 <HAL_ADC_IRQHandler+0x1f2>
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_ADC_IRQHandler+0x230>)
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4293      	cmp	r3, r2
 800189c:	d008      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d002      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b07      	cmp	r3, #7
 80018ae:	d104      	bne.n	80018ba <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	e013      	b.n	80018e2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_ADC_IRQHandler+0x22c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_ADC_IRQHandler+0x234>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e007      	b.n	80018da <HAL_ADC_IRQHandler+0x236>
 80018ca:	bf00      	nop
 80018cc:	50040300 	.word	0x50040300
 80018d0:	50040100 	.word	0x50040100
 80018d4:	50040000 	.word	0x50040000
 80018d8:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <HAL_ADC_IRQHandler+0x42c>)
 80018da:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d047      	beq.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_ADC_IRQHandler+0x25e>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03f      	beq.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d13a      	bne.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	2b40      	cmp	r3, #64	; 0x40
 800190e:	d133      	bne.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d12e      	bne.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fd5c 	bl	80013dc <LL_ADC_INJ_IsConversionOngoing>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11a      	bne.n	8001960 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001938:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d112      	bne.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
 800195e:	e00b      	b.n	8001978 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f043 0210 	orr.w	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fce3 	bl	8002344 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2260      	movs	r2, #96	; 0x60
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b00      	cmp	r3, #0
 800198e:	d011      	beq.n	80019b4 <HAL_ADC_IRQHandler+0x310>
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8a0 	bl	8001aec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d012      	beq.n	80019e4 <HAL_ADC_IRQHandler+0x340>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00d      	beq.n	80019e4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fcc9 	bl	800236c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d012      	beq.n	8001a14 <HAL_ADC_IRQHandler+0x370>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fcbb 	bl	8002380 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x3e8>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d031      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e014      	b.n	8001a60 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a3c:	4825      	ldr	r0, [pc, #148]	; (8001ad4 <HAL_ADC_IRQHandler+0x430>)
 8001a3e:	f7ff fc4b 	bl	80012d8 <LL_ADC_GetMultiDMATransfer>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e008      	b.n	8001a60 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10e      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f043 0202 	orr.w	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f83e 	bl	8001b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d018      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x424>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f043 0208 	orr.w	r2, r3, #8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fc48 	bl	8002358 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	50040000 	.word	0x50040000
 8001ad4:	50040300 	.word	0x50040300

08001ad8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0b6      	sub	sp, #216	; 0xd8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x22>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e3c9      	b.n	80022ca <HAL_ADC_ConfigChannel+0x7b6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fc37 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 83aa 	bne.w	80022a4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d824      	bhi.n	8001baa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	3b02      	subs	r3, #2
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d81b      	bhi.n	8001ba2 <HAL_ADC_ConfigChannel+0x8e>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_ADC_ConfigChannel+0x5c>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b89 	.word	0x08001b89
 8001b78:	08001b91 	.word	0x08001b91
 8001b7c:	08001b99 	.word	0x08001b99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b80:	230c      	movs	r3, #12
 8001b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b86:	e010      	b.n	8001baa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b88:	2312      	movs	r3, #18
 8001b8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b8e:	e00c      	b.n	8001baa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b90:	2318      	movs	r3, #24
 8001b92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b96:	e008      	b.n	8001baa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ba0:	e003      	b.n	8001baa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ba8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001bb8:	f7ff faf2 	bl	80011a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbf8 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc04 	bl	80013dc <LL_ADC_INJ_IsConversionOngoing>
 8001bd4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 81a4 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 819f 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f7ff fb10 	bl	800121e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00a      	beq.n	8001c36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c30:	f7ff fa4e 	bl	80010d0 <LL_ADC_SetOffset>
 8001c34:	e179      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fa6b 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x14e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa60 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	e01e      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x18c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fa55 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e004      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001c94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1a4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	e018      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1d6>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e004      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d106      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fa24 	bl	8001144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa08 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10a      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x214>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2101      	movs	r1, #1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff f9fd 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	0e9b      	lsrs	r3, r3, #26
 8001d22:	f003 021f 	and.w	r2, r3, #31
 8001d26:	e01e      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x252>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f9f2 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e004      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x26a>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	e018      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x29c>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e004      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2200      	movs	r2, #0
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f9c1 	bl	8001144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f9a5 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x2da>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f99a 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	e01e      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x318>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2102      	movs	r1, #2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f98f 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e004      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x330>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	e014      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x35a>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e004      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f962 	bl	8001144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2103      	movs	r1, #3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f946 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10a      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x398>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f93b 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 021f 	and.w	r2, r3, #31
 8001eaa:	e017      	b.n	8001edc <HAL_ADC_ConfigChannel+0x3c8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f930 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e003      	b.n	8001eda <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x3e0>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	e011      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x404>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f04:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e003      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2103      	movs	r1, #3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f90d 	bl	8001144 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fa2e 	bl	8001390 <LL_ADC_IsEnabled>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8140 	bne.w	80021bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f7ff f993 	bl	8001274 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a8f      	ldr	r2, [pc, #572]	; (8002190 <HAL_ADC_ConfigChannel+0x67c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 8131 	bne.w	80021bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x46e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	bf94      	ite	ls
 8001f7a:	2301      	movls	r3, #1
 8001f7c:	2300      	movhi	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e019      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x4a2>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f92:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d079      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4c2>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	3301      	adds	r3, #1
 8001fce:	069b      	lsls	r3, r3, #26
 8001fd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd4:	e015      	b.n	8002002 <HAL_ADC_ConfigChannel+0x4ee>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e003      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x50e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	3301      	adds	r3, #1
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	e017      	b.n	8002052 <HAL_ADC_ConfigChannel+0x53e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002032:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800203e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	ea42 0103 	orr.w	r1, r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x564>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	3301      	adds	r3, #1
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	e018      	b.n	80020aa <HAL_ADC_ConfigChannel+0x596>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f003 021f 	and.w	r2, r3, #31
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020aa:	430b      	orrs	r3, r1
 80020ac:	e081      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x5b6>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	3301      	adds	r3, #1
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c8:	e015      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x5e2>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	069b      	lsls	r3, r3, #26
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x602>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	3301      	adds	r3, #1
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	e017      	b.n	8002146 <HAL_ADC_ConfigChannel+0x632>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	61bb      	str	r3, [r7, #24]
  return result;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	ea42 0103 	orr.w	r1, r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10d      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x65e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	3301      	adds	r3, #1
 800215e:	f003 021f 	and.w	r2, r3, #31
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	051b      	lsls	r3, r3, #20
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002170:	e01e      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x69c>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	60fb      	str	r3, [r7, #12]
  return result;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800218a:	2320      	movs	r3, #32
 800218c:	e006      	b.n	800219c <HAL_ADC_ConfigChannel+0x688>
 800218e:	bf00      	nop
 8002190:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f003 021f 	and.w	r2, r3, #31
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	3b1e      	subs	r3, #30
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7ff f831 	bl	800121e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d07a      	beq.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c8:	4843      	ldr	r0, [pc, #268]	; (80022d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80021ca:	f7fe ff73 	bl	80010b4 <LL_ADC_GetCommonPathInternalCh>
 80021ce:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a41      	ldr	r2, [pc, #260]	; (80022dc <HAL_ADC_ConfigChannel+0x7c8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d12c      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d126      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a3c      	ldr	r2, [pc, #240]	; (80022e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_ConfigChannel+0x6e8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_ADC_ConfigChannel+0x7d0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d15d      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002204:	4619      	mov	r1, r3
 8002206:	4834      	ldr	r0, [pc, #208]	; (80022d8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002208:	f7fe ff41 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	4a36      	ldr	r2, [pc, #216]	; (80022ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002226:	e002      	b.n	800222e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3b01      	subs	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002234:	e040      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d118      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d112      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x74c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d12d      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002260:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002268:	4619      	mov	r1, r3
 800226a:	481b      	ldr	r0, [pc, #108]	; (80022d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800226c:	f7fe ff0f 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002270:	e024      	b.n	80022bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d120      	bne.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800227c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11a      	bne.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d115      	bne.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002296:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800229a:	4619      	mov	r1, r3
 800229c:	480e      	ldr	r0, [pc, #56]	; (80022d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800229e:	f7fe fef6 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
 80022a2:	e00c      	b.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022b6:	e002      	b.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b8:	bf00      	nop
 80022ba:	e000      	b.n	80022be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	37d8      	adds	r7, #216	; 0xd8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	80080000 	.word	0x80080000
 80022d8:	50040300 	.word	0x50040300
 80022dc:	c7520000 	.word	0xc7520000
 80022e0:	50040000 	.word	0x50040000
 80022e4:	50040200 	.word	0x50040200
 80022e8:	20000000 	.word	0x20000000
 80022ec:	053e2d63 	.word	0x053e2d63
 80022f0:	cb840000 	.word	0xcb840000
 80022f4:	80000001 	.word	0x80000001

080022f8 <LL_ADC_IsEnabled>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <LL_ADC_IsEnabled+0x18>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LL_ADC_IsEnabled+0x1a>
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_REG_IsConversionOngoing>:
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d101      	bne.n	8002336 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b09f      	sub	sp, #124	; 0x7c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e093      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80023ce:	2300      	movs	r3, #0
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023d2:	2300      	movs	r3, #0
 80023d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a47      	ldr	r2, [pc, #284]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d102      	bne.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023e0:	4b46      	ldr	r3, [pc, #280]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e001      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e072      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff87 	bl	800231e <LL_ADC_REG_IsConversionOngoing>
 8002410:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff81 	bl	800231e <LL_ADC_REG_IsConversionOngoing>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d154      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002424:	2b00      	cmp	r3, #0
 8002426:	d151      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800242a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02c      	beq.n	800248e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002446:	035b      	lsls	r3, r3, #13
 8002448:	430b      	orrs	r3, r1
 800244a:	431a      	orrs	r2, r3
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002452:	f7ff ff51 	bl	80022f8 <LL_ADC_IsEnabled>
 8002456:	4604      	mov	r4, r0
 8002458:	4828      	ldr	r0, [pc, #160]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800245a:	f7ff ff4d 	bl	80022f8 <LL_ADC_IsEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	431c      	orrs	r4, r3
 8002462:	4828      	ldr	r0, [pc, #160]	; (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002464:	f7ff ff48 	bl	80022f8 <LL_ADC_IsEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	4323      	orrs	r3, r4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d137      	bne.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002478:	f023 030f 	bic.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6811      	ldr	r1, [r2, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6892      	ldr	r2, [r2, #8]
 8002484:	430a      	orrs	r2, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800248c:	e028      	b.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249a:	4817      	ldr	r0, [pc, #92]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800249c:	f7ff ff2c 	bl	80022f8 <LL_ADC_IsEnabled>
 80024a0:	4604      	mov	r4, r0
 80024a2:	4816      	ldr	r0, [pc, #88]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024a4:	f7ff ff28 	bl	80022f8 <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	431c      	orrs	r4, r3
 80024ac:	4815      	ldr	r0, [pc, #84]	; (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024ae:	f7ff ff23 	bl	80022f8 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4323      	orrs	r3, r4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024c2:	f023 030f 	bic.w	r3, r3, #15
 80024c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ca:	e009      	b.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024de:	e000      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	377c      	adds	r7, #124	; 0x7c
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	50040000 	.word	0x50040000
 80024fc:	50040100 	.word	0x50040100
 8002500:	50040300 	.word	0x50040300
 8002504:	50040200 	.word	0x50040200

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e17f      	b.n	8002a3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2101      	movs	r1, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8171 	beq.w	8002a36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d005      	beq.n	800276c <HAL_GPIO_Init+0x40>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d130      	bne.n	80027ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027a2:	2201      	movs	r2, #1
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0201 	and.w	r2, r3, #1
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d118      	bne.n	800280c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	6939      	ldr	r1, [r7, #16]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ac 	beq.w	8002a36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <HAL_GPIO_Init+0x330>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	4a5e      	ldr	r2, [pc, #376]	; (8002a5c <HAL_GPIO_Init+0x330>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6613      	str	r3, [r2, #96]	; 0x60
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <HAL_GPIO_Init+0x330>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028f6:	4a5a      	ldr	r2, [pc, #360]	; (8002a60 <HAL_GPIO_Init+0x334>)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x242>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4f      	ldr	r2, [pc, #316]	; (8002a64 <HAL_GPIO_Init+0x338>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x23e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4e      	ldr	r2, [pc, #312]	; (8002a68 <HAL_GPIO_Init+0x33c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x23a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <HAL_GPIO_Init+0x340>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x236>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <HAL_GPIO_Init+0x344>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x232>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_GPIO_Init+0x348>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x22e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4a      	ldr	r2, [pc, #296]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x22a>
 8002952:	2306      	movs	r3, #6
 8002954:	e00c      	b.n	8002970 <HAL_GPIO_Init+0x244>
 8002956:	2307      	movs	r3, #7
 8002958:	e00a      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800295a:	2305      	movs	r3, #5
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800295e:	2304      	movs	r3, #4
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x244>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x244>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800296e:	2300      	movs	r3, #0
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002980:	4937      	ldr	r1, [pc, #220]	; (8002a60 <HAL_GPIO_Init+0x334>)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_GPIO_Init+0x350>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b2:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <HAL_GPIO_Init+0x350>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_GPIO_Init+0x350>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_GPIO_Init+0x350>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_GPIO_Init+0x350>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_GPIO_Init+0x350>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_GPIO_Init+0x350>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <HAL_GPIO_Init+0x350>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f ae78 	bne.w	800273c <HAL_GPIO_Init+0x10>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	48001000 	.word	0x48001000
 8002a74:	48001400 	.word	0x48001400
 8002a78:	48001800 	.word	0x48001800
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd ff88 	bl	80009e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40010400 	.word	0x40010400

08002ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0a:	d130      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d038      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d110      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d007      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e3ca      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80e4 	beq.w	8002da4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4a>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	f040 808b 	bne.w	8002d00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 8087 	bne.w	8002d00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e3a2      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_RCC_OscConfig+0x7c>
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c22:	e005      	b.n	8002c30 <HAL_RCC_OscConfig+0x88>
 8002c24:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d223      	bcs.n	8002c7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd55 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e383      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c48:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	496d      	ldr	r1, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	4968      	ldr	r1, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
 8002c7a:	e025      	b.n	8002cc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4960      	ldr	r1, [pc, #384]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	495b      	ldr	r1, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fd15 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e343      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc8:	f000 fc4a 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b52      	ldr	r3, [pc, #328]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	4950      	ldr	r1, [pc, #320]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	4a4e      	ldr	r2, [pc, #312]	; (8002e20 <HAL_RCC_OscConfig+0x278>)
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe f95f 	bl	8000fb0 <HAL_InitTick>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d052      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	e327      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a42      	ldr	r2, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d14:	f7fe f99c 	bl	8001050 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f998 	bl	8001050 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e310      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a36      	ldr	r2, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4931      	ldr	r1, [pc, #196]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	492c      	ldr	r1, [pc, #176]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e01a      	b.n	8002da4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f969 	bl	8001050 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d82:	f7fe f965 	bl	8001050 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e2dd      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x1da>
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d074      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x21a>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d10e      	bne.n	8002dda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d064      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d160      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e2ba      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x24a>
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e026      	b.n	8002e40 <HAL_RCC_OscConfig+0x298>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfa:	d115      	bne.n	8002e28 <HAL_RCC_OscConfig+0x280>
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a02      	ldr	r2, [pc, #8]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e014      	b.n	8002e40 <HAL_RCC_OscConfig+0x298>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08005cbc 	.word	0x08005cbc
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004
 8002e28:	4ba0      	ldr	r3, [pc, #640]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a9f      	ldr	r2, [pc, #636]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b9d      	ldr	r3, [pc, #628]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a9c      	ldr	r2, [pc, #624]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f902 	bl	8001050 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f8fe 	bl	8001050 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e276      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e62:	4b92      	ldr	r3, [pc, #584]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x2a8>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe f8ee 	bl	8001050 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe f8ea 	bl	8001050 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e262      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8a:	4b88      	ldr	r3, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d0>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d060      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x310>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d119      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d116      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	4b7c      	ldr	r3, [pc, #496]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x328>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e23f      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4973      	ldr	r1, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	e040      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eee:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6e      	ldr	r2, [pc, #440]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe f8a9 	bl	8001050 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7fe f8a5 	bl	8001050 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e21d      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b62      	ldr	r3, [pc, #392]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	495f      	ldr	r1, [pc, #380]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5c      	ldr	r2, [pc, #368]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe f885 	bl	8001050 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fe f881 	bl	8001050 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1f9      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f860 	bl	8001050 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe f85c 	bl	8001050 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1d4      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3ec>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f843 	bl	8001050 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe f83f 	bl	8001050 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1b7      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80a6 	beq.w	8003148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7fe f806 	bl	8001050 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe f802 	bl	8001050 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e17a      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d108      	bne.n	8003080 <HAL_RCC_OscConfig+0x4d8>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	e029      	b.n	80030d4 <HAL_RCC_OscConfig+0x52c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d115      	bne.n	80030b4 <HAL_RCC_OscConfig+0x50c>
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e014      	b.n	80030d4 <HAL_RCC_OscConfig+0x52c>
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	4b9c      	ldr	r3, [pc, #624]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a9b      	ldr	r2, [pc, #620]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c4:	4b98      	ldr	r3, [pc, #608]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4a97      	ldr	r2, [pc, #604]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d016      	beq.n	800310a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fd ffb8 	bl	8001050 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fd ffb4 	bl	8001050 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e12a      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fa:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ed      	beq.n	80030e4 <HAL_RCC_OscConfig+0x53c>
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fd ffa1 	bl	8001050 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fd ff9d 	bl	8001050 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e113      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003128:	4b7f      	ldr	r3, [pc, #508]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ed      	bne.n	8003112 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4b7a      	ldr	r3, [pc, #488]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a79      	ldr	r2, [pc, #484]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80fe 	beq.w	800334e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	2b02      	cmp	r3, #2
 8003158:	f040 80d0 	bne.w	80032fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800315c:	4b72      	ldr	r3, [pc, #456]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	429a      	cmp	r2, r3
 800316e:	d130      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	3b01      	subs	r3, #1
 800317c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d127      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d11f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800319c:	2a07      	cmp	r2, #7
 800319e:	bf14      	ite	ne
 80031a0:	2201      	movne	r2, #1
 80031a2:	2200      	moveq	r2, #0
 80031a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	3b01      	subs	r3, #1
 80031b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d06e      	beq.n	80032b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d069      	beq.n	80032ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0ad      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003200:	f7fd ff26 	bl	8001050 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fd ff22 	bl	8001050 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e09a      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321a:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_RCC_OscConfig+0x784>)
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003236:	3a01      	subs	r2, #1
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	4311      	orrs	r1, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003240:	0212      	lsls	r2, r2, #8
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0552      	lsls	r2, r2, #21
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0652      	lsls	r2, r2, #25
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003260:	0912      	lsrs	r2, r2, #4
 8003262:	0452      	lsls	r2, r2, #17
 8003264:	430a      	orrs	r2, r1
 8003266:	4930      	ldr	r1, [pc, #192]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 8003268:	4313      	orrs	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003284:	f7fd fee4 	bl	8001050 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd fee0 	bl	8001050 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e058      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032aa:	e050      	b.n	800334e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e04f      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d148      	bne.n	800334e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a16      	ldr	r2, [pc, #88]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032d4:	f7fd febc 	bl	8001050 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fd feb8 	bl	8001050 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e030      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x734>
 80032fa:	e028      	b.n	800334e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d023      	beq.n	800334a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <HAL_RCC_OscConfig+0x780>)
 8003308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fd fe9f 	bl	8001050 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003314:	e00c      	b.n	8003330 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003316:	f7fd fe9b 	bl	8001050 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d905      	bls.n	8003330 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e013      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
 8003328:	40021000 	.word	0x40021000
 800332c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x7b0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ec      	bne.n	8003316 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x7b0>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	4905      	ldr	r1, [pc, #20]	; (8003358 <HAL_RCC_OscConfig+0x7b0>)
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_OscConfig+0x7b4>)
 8003344:	4013      	ands	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
 8003348:	e001      	b.n	800334e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	feeefffc 	.word	0xfeeefffc

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0e7      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b72      	ldr	r3, [pc, #456]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4970      	ldr	r1, [pc, #448]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b6e      	ldr	r3, [pc, #440]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cf      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033bc:	429a      	cmp	r2, r3
 80033be:	d908      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4960      	ldr	r1, [pc, #384]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04c      	beq.n	8003478 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0a6      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b54      	ldr	r3, [pc, #336]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e09a      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003416:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08e      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e086      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4943      	ldr	r1, [pc, #268]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fd fe02 	bl	8001050 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fd fdfe 	bl	8001050 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e06e      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	429a      	cmp	r2, r3
 8003492:	d208      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	492b      	ldr	r1, [pc, #172]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d210      	bcs.n	80034d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4923      	ldr	r1, [pc, #140]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e036      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4918      	ldr	r1, [pc, #96]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4910      	ldr	r1, [pc, #64]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003514:	f000 f824 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	490b      	ldr	r1, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1f4>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003532:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1fc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fd39 	bl	8000fb0 <HAL_InitTick>
 800353e:	4603      	mov	r3, r0
 8003540:	72fb      	strb	r3, [r7, #11]

  return status;
 8003542:	7afb      	ldrb	r3, [r7, #11]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40022000 	.word	0x40022000
 8003550:	40021000 	.word	0x40021000
 8003554:	08005cbc 	.word	0x08005cbc
 8003558:	20000000 	.word	0x20000000
 800355c:	20000004 	.word	0x20000004

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x34>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d121      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d11e      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e005      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035bc:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d102      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_GetSysClockFreq+0x110>)
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e004      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_GetSysClockFreq+0x114>)
 80035e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d134      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0xa6>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xac>
 8003604:	e005      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCC_GetSysClockFreq+0x110>)
 8003608:	617b      	str	r3, [r7, #20]
      break;
 800360a:	e005      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_GetSysClockFreq+0x114>)
 800360e:	617b      	str	r3, [r7, #20]
      break;
 8003610:	e002      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	3301      	adds	r3, #1
 8003624:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	fb03 f202 	mul.w	r2, r3, r2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	0e5b      	lsrs	r3, r3, #25
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	3301      	adds	r3, #1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003658:	69bb      	ldr	r3, [r7, #24]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	08005cd4 	.word	0x08005cd4
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08005ccc 	.word	0x08005ccc

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036c0:	f7ff ffda 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0adb      	lsrs	r3, r3, #11
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4904      	ldr	r1, [pc, #16]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08005ccc 	.word	0x08005ccc

080036e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003700:	f7ff f9ee 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 8003704:	6178      	str	r0, [r7, #20]
 8003706:	e014      	b.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003720:	f7ff f9de 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 8003724:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d10b      	bne.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d919      	bls.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2ba0      	cmp	r3, #160	; 0xa0
 8003744:	d902      	bls.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003746:	2302      	movs	r3, #2
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e013      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800374c:	2301      	movs	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e010      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d902      	bls.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003758:	2303      	movs	r3, #3
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e00a      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d102      	bne.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003764:	2302      	movs	r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e004      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d101      	bne.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003770:	2301      	movs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 0207 	bic.w	r2, r3, #7
 800377c:	4909      	ldr	r1, [pc, #36]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40022000 	.word	0x40022000

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b4:	2300      	movs	r3, #0
 80037b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d041      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037cc:	d02a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d2:	d824      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037de:	d81e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e8:	d010      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ea:	e018      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037ec:	4b86      	ldr	r3, [pc, #536]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a85      	ldr	r2, [pc, #532]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f8:	e015      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fabb 	bl	8003d7c <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800380a:	e00c      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3320      	adds	r3, #32
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fba6 	bl	8003f64 <RCCEx_PLLSAI2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	74fb      	strb	r3, [r7, #19]
      break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800382c:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800383a:	4973      	ldr	r1, [pc, #460]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d041      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800385c:	d02a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800385e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800386a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003878:	d010      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800387c:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003888:	e015      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fa73 	bl	8003d7c <RCCEx_PLLSAI1_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3320      	adds	r3, #32
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb5e 	bl	8003f64 <RCCEx_PLLSAI2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	74fb      	strb	r3, [r7, #19]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038bc:	4b52      	ldr	r3, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ca:	494f      	ldr	r1, [pc, #316]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a0 	beq.w	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003928:	f7fd fb92 	bl	8001050 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392e:	e009      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fd fb8e 	bl	8001050 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	74fb      	strb	r3, [r7, #19]
        break;
 8003942:	e005      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d15c      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	d019      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd fb4d 	bl	8001050 <HAL_GetTick>
 80039b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b8:	e00b      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fd fb49 	bl	8001050 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d902      	bls.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	74fb      	strb	r3, [r7, #19]
            break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ec      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039fe:	e009      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a14:	7c7b      	ldrb	r3, [r7, #17]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b9e      	ldr	r3, [pc, #632]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a9d      	ldr	r2, [pc, #628]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a32:	4b98      	ldr	r3, [pc, #608]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f023 0203 	bic.w	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	4994      	ldr	r1, [pc, #592]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a54:	4b8f      	ldr	r3, [pc, #572]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 020c 	bic.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	498c      	ldr	r1, [pc, #560]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a76:	4b87      	ldr	r3, [pc, #540]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4983      	ldr	r1, [pc, #524]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a98:	4b7e      	ldr	r3, [pc, #504]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	497b      	ldr	r1, [pc, #492]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aba:	4b76      	ldr	r3, [pc, #472]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	4972      	ldr	r1, [pc, #456]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003adc:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	496a      	ldr	r1, [pc, #424]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afe:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	4961      	ldr	r1, [pc, #388]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b20:	4b5c      	ldr	r3, [pc, #368]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	4959      	ldr	r1, [pc, #356]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b42:	4b54      	ldr	r3, [pc, #336]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	4950      	ldr	r1, [pc, #320]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	4948      	ldr	r1, [pc, #288]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b86:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	493f      	ldr	r1, [pc, #252]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d028      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba8:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb6:	4937      	ldr	r1, [pc, #220]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc8:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a31      	ldr	r2, [pc, #196]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd2:	60d3      	str	r3, [r2, #12]
 8003bd4:	e011      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	2101      	movs	r1, #1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f8c8 	bl	8003d7c <RCCEx_PLLSAI1_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c06:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	491f      	ldr	r1, [pc, #124]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c24:	d106      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c30:	60d3      	str	r3, [r2, #12]
 8003c32:	e011      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f899 	bl	8003d7c <RCCEx_PLLSAI1_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02b      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c72:	4908      	ldr	r1, [pc, #32]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c82:	d109      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a02      	ldr	r2, [pc, #8]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8e:	60d3      	str	r3, [r2, #12]
 8003c90:	e014      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f867 	bl	8003d7c <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02f      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd6:	4928      	ldr	r1, [pc, #160]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f844 	bl	8003d7c <RCCEx_PLLSAI1_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d014      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	74bb      	strb	r3, [r7, #18]
 8003d02:	e011      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3320      	adds	r3, #32
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f925 	bl	8003f64 <RCCEx_PLLSAI2_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d42:	490d      	ldr	r1, [pc, #52]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000

08003d7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d8a:	4b75      	ldr	r3, [pc, #468]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d018      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d96:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0203 	and.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10d      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
       ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dae:	4b6c      	ldr	r3, [pc, #432]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d047      	beq.n	8003e52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e044      	b.n	8003e52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d018      	beq.n	8003e02 <RCCEx_PLLSAI1_Config+0x86>
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d825      	bhi.n	8003e20 <RCCEx_PLLSAI1_Config+0xa4>
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <RCCEx_PLLSAI1_Config+0x62>
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d009      	beq.n	8003df0 <RCCEx_PLLSAI1_Config+0x74>
 8003ddc:	e020      	b.n	8003e20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dde:	4b60      	ldr	r3, [pc, #384]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11d      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dee:	e01a      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df0:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e00:	e013      	b.n	8003e2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e02:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e1e:	e006      	b.n	8003e2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e004      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e36:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	4944      	ldr	r1, [pc, #272]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d17d      	bne.n	8003f54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e58:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fd f8f4 	bl	8001050 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e6a:	e009      	b.n	8003e80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e6c:	f7fd f8f0 	bl	8001050 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d902      	bls.n	8003e80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7e:	e005      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e80:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ef      	bne.n	8003e6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d160      	bne.n	8003f54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e98:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6892      	ldr	r2, [r2, #8]
 8003ea8:	0211      	lsls	r1, r2, #8
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68d2      	ldr	r2, [r2, #12]
 8003eae:	0912      	lsrs	r2, r2, #4
 8003eb0:	0452      	lsls	r2, r2, #17
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	492a      	ldr	r1, [pc, #168]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
 8003eba:	e027      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d112      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec2:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	0211      	lsls	r1, r2, #8
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6912      	ldr	r2, [r2, #16]
 8003ed8:	0852      	lsrs	r2, r2, #1
 8003eda:	3a01      	subs	r2, #1
 8003edc:	0552      	lsls	r2, r2, #21
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	491f      	ldr	r1, [pc, #124]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	610b      	str	r3, [r1, #16]
 8003ee6:	e011      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6952      	ldr	r2, [r2, #20]
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0652      	lsls	r2, r2, #25
 8003f04:	430a      	orrs	r2, r1
 8003f06:	4916      	ldr	r1, [pc, #88]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd f89a 	bl	8001050 <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f1e:	e009      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f20:	f7fd f896 	bl	8001050 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d902      	bls.n	8003f34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	73fb      	strb	r3, [r7, #15]
          break;
 8003f32:	e005      	b.n	8003f40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ef      	beq.n	8003f20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	4904      	ldr	r1, [pc, #16]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d018      	beq.n	8003fb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f7e:	4b67      	ldr	r3, [pc, #412]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0203 	and.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
       ||
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f96:	4b61      	ldr	r3, [pc, #388]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d047      	beq.n	800403a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e044      	b.n	800403a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d018      	beq.n	8003fea <RCCEx_PLLSAI2_Config+0x86>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d825      	bhi.n	8004008 <RCCEx_PLLSAI2_Config+0xa4>
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d002      	beq.n	8003fc6 <RCCEx_PLLSAI2_Config+0x62>
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d009      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x74>
 8003fc4:	e020      	b.n	8004008 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fc6:	4b55      	ldr	r3, [pc, #340]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11d      	bne.n	800400e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd6:	e01a      	b.n	800400e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d116      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe8:	e013      	b.n	8004012 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fea:	4b4c      	ldr	r3, [pc, #304]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ff6:	4b49      	ldr	r3, [pc, #292]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004006:	e006      	b.n	8004016 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      break;
 800400c:	e004      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004016:	bf00      	nop
    }

    if(status == HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10d      	bne.n	800403a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	430b      	orrs	r3, r1
 8004034:	4939      	ldr	r1, [pc, #228]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004036:	4313      	orrs	r3, r2
 8004038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d167      	bne.n	8004110 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a35      	ldr	r2, [pc, #212]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404c:	f7fd f800 	bl	8001050 <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004052:	e009      	b.n	8004068 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004054:	f7fc fffc 	bl	8001050 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	73fb      	strb	r3, [r7, #15]
        break;
 8004066:	e005      	b.n	8004074 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004068:	4b2c      	ldr	r3, [pc, #176]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ef      	bne.n	8004054 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d14a      	bne.n	8004110 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d111      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6892      	ldr	r2, [r2, #8]
 8004090:	0211      	lsls	r1, r2, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	0912      	lsrs	r2, r2, #4
 8004098:	0452      	lsls	r2, r2, #17
 800409a:	430a      	orrs	r2, r1
 800409c:	491f      	ldr	r1, [pc, #124]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	614b      	str	r3, [r1, #20]
 80040a2:	e011      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	0211      	lsls	r1, r2, #8
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6912      	ldr	r2, [r2, #16]
 80040ba:	0852      	lsrs	r2, r2, #1
 80040bc:	3a01      	subs	r2, #1
 80040be:	0652      	lsls	r2, r2, #25
 80040c0:	430a      	orrs	r2, r1
 80040c2:	4916      	ldr	r1, [pc, #88]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fc ffbc 	bl	8001050 <HAL_GetTick>
 80040d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040da:	e009      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040dc:	f7fc ffb8 	bl	8001050 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d902      	bls.n	80040f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	73fb      	strb	r3, [r7, #15]
          break;
 80040ee:	e005      	b.n	80040fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ef      	beq.n	80040dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4904      	ldr	r1, [pc, #16]	; (800411c <RCCEx_PLLSAI2_Config+0x1b8>)
 800410c:	4313      	orrs	r3, r2
 800410e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000

08004120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e049      	b.n	80041c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fd3e 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 fba8 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e049      	b.n	8004274 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f841 	bl	800427c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f000 fb51 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0202 	mvn.w	r2, #2
 80042c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 facb 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fabd 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 face 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0204 	mvn.w	r2, #4
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 faa5 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fa97 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 faa8 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01b      	beq.n	800438c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0208 	mvn.w	r2, #8
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2204      	movs	r2, #4
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa7f 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa71 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fa82 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d020      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01b      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0210 	mvn.w	r2, #16
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2208      	movs	r2, #8
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa59 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fa4b 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fa5c 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0201 	mvn.w	r2, #1
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa29 	bl	800484e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fee6 	bl	80051ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fede 	bl	8005200 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa1b 	bl	800489e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0220 	mvn.w	r2, #32
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fea6 	bl	80051d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e0ff      	b.n	80046b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b14      	cmp	r3, #20
 80044be:	f200 80f0 	bhi.w	80046a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	080046a3 	.word	0x080046a3
 80044d0:	080046a3 	.word	0x080046a3
 80044d4:	080046a3 	.word	0x080046a3
 80044d8:	0800455d 	.word	0x0800455d
 80044dc:	080046a3 	.word	0x080046a3
 80044e0:	080046a3 	.word	0x080046a3
 80044e4:	080046a3 	.word	0x080046a3
 80044e8:	0800459f 	.word	0x0800459f
 80044ec:	080046a3 	.word	0x080046a3
 80044f0:	080046a3 	.word	0x080046a3
 80044f4:	080046a3 	.word	0x080046a3
 80044f8:	080045df 	.word	0x080045df
 80044fc:	080046a3 	.word	0x080046a3
 8004500:	080046a3 	.word	0x080046a3
 8004504:	080046a3 	.word	0x080046a3
 8004508:	08004621 	.word	0x08004621
 800450c:	080046a3 	.word	0x080046a3
 8004510:	080046a3 	.word	0x080046a3
 8004514:	080046a3 	.word	0x080046a3
 8004518:	08004661 	.word	0x08004661
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fa60 	bl	80049e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	619a      	str	r2, [r3, #24]
      break;
 800455a:	e0a5      	b.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fad0 	bl	8004b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6999      	ldr	r1, [r3, #24]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	021a      	lsls	r2, r3, #8
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
      break;
 800459c:	e084      	b.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fb39 	bl	8004c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0208 	orr.w	r2, r2, #8
 80045b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0204 	bic.w	r2, r2, #4
 80045c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
      break;
 80045dc:	e064      	b.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fba1 	bl	8004d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69d9      	ldr	r1, [r3, #28]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	021a      	lsls	r2, r3, #8
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	61da      	str	r2, [r3, #28]
      break;
 800461e:	e043      	b.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fbea 	bl	8004e00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0208 	orr.w	r2, r2, #8
 800463a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0204 	bic.w	r2, r2, #4
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800465e:	e023      	b.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fc2e 	bl	8004ec8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046a0:	e002      	b.n	80046a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
      break;
 80046a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop

080046bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIM_ConfigClockSource+0x1c>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0b6      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x18a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004714:	d03e      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xd8>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	f200 8087 	bhi.w	800482c <HAL_TIM_ConfigClockSource+0x170>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004722:	f000 8086 	beq.w	8004832 <HAL_TIM_ConfigClockSource+0x176>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472a:	d87f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d01a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xaa>
 8004730:	2b70      	cmp	r3, #112	; 0x70
 8004732:	d87b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 8004734:	2b60      	cmp	r3, #96	; 0x60
 8004736:	d050      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x11e>
 8004738:	2b60      	cmp	r3, #96	; 0x60
 800473a:	d877      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 800473c:	2b50      	cmp	r3, #80	; 0x50
 800473e:	d03c      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xfe>
 8004740:	2b50      	cmp	r3, #80	; 0x50
 8004742:	d873      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d058      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x13e>
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d86f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 800474c:	2b30      	cmp	r3, #48	; 0x30
 800474e:	d064      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15e>
 8004750:	2b30      	cmp	r3, #48	; 0x30
 8004752:	d86b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d060      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15e>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d867      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x170>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15e>
 8004760:	2b10      	cmp	r3, #16
 8004762:	d05a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15e>
 8004764:	e062      	b.n	800482c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	f000 fc87 	bl	8005088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e04f      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	f000 fc70 	bl	8005088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e03c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fbe4 	bl	8004f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2150      	movs	r1, #80	; 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc3d 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e02c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 fc03 	bl	8004ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2160      	movs	r1, #96	; 0x60
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fc2d 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e01c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fbc4 	bl	8004f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fc1d 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004818:	e00c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f000 fc14 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 800482a:	e003      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e000      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d00f      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3d      	ldr	r2, [pc, #244]	; (80049cc <TIM_Base_SetConfig+0x118>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00b      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <TIM_Base_SetConfig+0x11c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <TIM_Base_SetConfig+0x120>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d108      	bne.n	8004906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <TIM_Base_SetConfig+0x118>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <TIM_Base_SetConfig+0x11c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <TIM_Base_SetConfig+0x120>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <TIM_Base_SetConfig+0x128>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <TIM_Base_SetConfig+0x12c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <TIM_Base_SetConfig+0x130>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00f      	beq.n	80049ac <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00b      	beq.n	80049ac <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a11      	ldr	r2, [pc, #68]	; (80049dc <TIM_Base_SetConfig+0x128>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <TIM_Base_SetConfig+0x12c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <TIM_Base_SetConfig+0x130>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d103      	bne.n	80049b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	615a      	str	r2, [r3, #20]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40013400 	.word	0x40013400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800

080049e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f023 0201 	bic.w	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 0302 	bic.w	r3, r3, #2
 8004a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2c      	ldr	r2, [pc, #176]	; (8004af4 <TIM_OC1_SetConfig+0x10c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_OC1_SetConfig+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <TIM_OC1_SetConfig+0x110>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_OC1_SetConfig+0x80>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <TIM_OC1_SetConfig+0x114>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_OC1_SetConfig+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <TIM_OC1_SetConfig+0x118>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC1_SetConfig+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <TIM_OC1_SetConfig+0x11c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10c      	bne.n	8004a82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0308 	bic.w	r3, r3, #8
 8004a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <TIM_OC1_SetConfig+0x10c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00f      	beq.n	8004aaa <TIM_OC1_SetConfig+0xc2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <TIM_OC1_SetConfig+0x110>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00b      	beq.n	8004aaa <TIM_OC1_SetConfig+0xc2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <TIM_OC1_SetConfig+0x114>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d007      	beq.n	8004aaa <TIM_OC1_SetConfig+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC1_SetConfig+0x118>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d003      	beq.n	8004aaa <TIM_OC1_SetConfig+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC1_SetConfig+0x11c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d111      	bne.n	8004ace <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f023 0210 	bic.w	r2, r3, #16
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a28      	ldr	r2, [pc, #160]	; (8004c08 <TIM_OC2_SetConfig+0x100>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC2_SetConfig+0x6c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <TIM_OC2_SetConfig+0x104>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <TIM_OC2_SetConfig+0x100>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <TIM_OC2_SetConfig+0x104>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xb0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <TIM_OC2_SetConfig+0x108>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1a      	ldr	r2, [pc, #104]	; (8004c14 <TIM_OC2_SetConfig+0x10c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <TIM_OC2_SetConfig+0x110>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d113      	bne.n	8004be0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40013400 	.word	0x40013400
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800

08004c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_OC3_SetConfig+0xfc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_OC3_SetConfig+0x6a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_OC3_SetConfig+0x100>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10d      	bne.n	8004ca2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <TIM_OC3_SetConfig+0xfc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_OC3_SetConfig+0xae>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <TIM_OC3_SetConfig+0x100>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_OC3_SetConfig+0xae>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <TIM_OC3_SetConfig+0x104>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_OC3_SetConfig+0xae>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <TIM_OC3_SetConfig+0x108>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_OC3_SetConfig+0xae>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <TIM_OC3_SetConfig+0x10c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d113      	bne.n	8004cf2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	031b      	lsls	r3, r3, #12
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <TIM_OC4_SetConfig+0xc0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00f      	beq.n	8004db0 <TIM_OC4_SetConfig+0x84>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <TIM_OC4_SetConfig+0xc4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_OC4_SetConfig+0x84>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <TIM_OC4_SetConfig+0xc8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_OC4_SetConfig+0x84>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <TIM_OC4_SetConfig+0xcc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_OC4_SetConfig+0x84>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <TIM_OC4_SetConfig+0xd0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d109      	bne.n	8004dc4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40013400 	.word	0x40013400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40014400 	.word	0x40014400
 8004dfc:	40014800 	.word	0x40014800

08004e00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <TIM_OC5_SetConfig+0xb4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00f      	beq.n	8004e7a <TIM_OC5_SetConfig+0x7a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <TIM_OC5_SetConfig+0xb8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_OC5_SetConfig+0x7a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <TIM_OC5_SetConfig+0xbc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <TIM_OC5_SetConfig+0x7a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <TIM_OC5_SetConfig+0xc0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_OC5_SetConfig+0x7a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <TIM_OC5_SetConfig+0xc4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d109      	bne.n	8004e8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	051b      	lsls	r3, r3, #20
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <TIM_OC6_SetConfig+0xb8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_OC6_SetConfig+0x7c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <TIM_OC6_SetConfig+0xbc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_OC6_SetConfig+0x7c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <TIM_OC6_SetConfig+0xc0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_OC6_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <TIM_OC6_SetConfig+0xc4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC6_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <TIM_OC6_SetConfig+0xc8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 030a 	bic.w	r3, r3, #10
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b087      	sub	sp, #28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f023 0210 	bic.w	r2, r3, #16
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	031b      	lsls	r3, r3, #12
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800502e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	f043 0307 	orr.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050dc:	2302      	movs	r3, #2
 80050de:	e068      	b.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2e      	ldr	r2, [pc, #184]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2d      	ldr	r2, [pc, #180]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800511a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01d      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d018      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10c      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800518c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4313      	orrs	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e040      	b.n	80052a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fb fd52 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2224      	movs	r2, #36	; 0x24
 8005240:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fae0 	bl	8005820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f825 	bl	80052b0 <UART_SetConfig>
 8005266:	4603      	mov	r3, r0
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e01b      	b.n	80052a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800527e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800528e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fb5f 	bl	8005964 <UART_CheckIdleState>
 80052a6:	4603      	mov	r3, r0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b4:	b08a      	sub	sp, #40	; 0x28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4ba4      	ldr	r3, [pc, #656]	; (8005570 <UART_SetConfig+0x2c0>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a99      	ldr	r2, [pc, #612]	; (8005574 <UART_SetConfig+0x2c4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005318:	4313      	orrs	r3, r2
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532c:	430a      	orrs	r2, r1
 800532e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a90      	ldr	r2, [pc, #576]	; (8005578 <UART_SetConfig+0x2c8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d126      	bne.n	8005388 <UART_SetConfig+0xd8>
 800533a:	4b90      	ldr	r3, [pc, #576]	; (800557c <UART_SetConfig+0x2cc>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b03      	cmp	r3, #3
 8005346:	d81b      	bhi.n	8005380 <UART_SetConfig+0xd0>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0xa0>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005371 	.word	0x08005371
 8005358:	08005369 	.word	0x08005369
 800535c:	08005379 	.word	0x08005379
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e116      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005368:	2302      	movs	r3, #2
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e112      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e10e      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e10a      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e106      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <UART_SetConfig+0x2d0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d138      	bne.n	8005404 <UART_SetConfig+0x154>
 8005392:	4b7a      	ldr	r3, [pc, #488]	; (800557c <UART_SetConfig+0x2cc>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d82d      	bhi.n	80053fc <UART_SetConfig+0x14c>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0xf8>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	080053fd 	.word	0x080053fd
 80053b4:	080053fd 	.word	0x080053fd
 80053b8:	080053ed 	.word	0x080053ed
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	080053fd 	.word	0x080053fd
 80053c4:	080053fd 	.word	0x080053fd
 80053c8:	080053e5 	.word	0x080053e5
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	080053f5 	.word	0x080053f5
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e2:	e0d8      	b.n	8005596 <UART_SetConfig+0x2e6>
 80053e4:	2302      	movs	r3, #2
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e0d4      	b.n	8005596 <UART_SetConfig+0x2e6>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e0d0      	b.n	8005596 <UART_SetConfig+0x2e6>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e0cc      	b.n	8005596 <UART_SetConfig+0x2e6>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e0c8      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5e      	ldr	r2, [pc, #376]	; (8005584 <UART_SetConfig+0x2d4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d125      	bne.n	800545a <UART_SetConfig+0x1aa>
 800540e:	4b5b      	ldr	r3, [pc, #364]	; (800557c <UART_SetConfig+0x2cc>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005418:	2b30      	cmp	r3, #48	; 0x30
 800541a:	d016      	beq.n	800544a <UART_SetConfig+0x19a>
 800541c:	2b30      	cmp	r3, #48	; 0x30
 800541e:	d818      	bhi.n	8005452 <UART_SetConfig+0x1a2>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d00a      	beq.n	800543a <UART_SetConfig+0x18a>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d814      	bhi.n	8005452 <UART_SetConfig+0x1a2>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <UART_SetConfig+0x182>
 800542c:	2b10      	cmp	r3, #16
 800542e:	d008      	beq.n	8005442 <UART_SetConfig+0x192>
 8005430:	e00f      	b.n	8005452 <UART_SetConfig+0x1a2>
 8005432:	2300      	movs	r3, #0
 8005434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005438:	e0ad      	b.n	8005596 <UART_SetConfig+0x2e6>
 800543a:	2302      	movs	r3, #2
 800543c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005440:	e0a9      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005442:	2304      	movs	r3, #4
 8005444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005448:	e0a5      	b.n	8005596 <UART_SetConfig+0x2e6>
 800544a:	2308      	movs	r3, #8
 800544c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005450:	e0a1      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005452:	2310      	movs	r3, #16
 8005454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005458:	e09d      	b.n	8005596 <UART_SetConfig+0x2e6>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a4a      	ldr	r2, [pc, #296]	; (8005588 <UART_SetConfig+0x2d8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d125      	bne.n	80054b0 <UART_SetConfig+0x200>
 8005464:	4b45      	ldr	r3, [pc, #276]	; (800557c <UART_SetConfig+0x2cc>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800546e:	2bc0      	cmp	r3, #192	; 0xc0
 8005470:	d016      	beq.n	80054a0 <UART_SetConfig+0x1f0>
 8005472:	2bc0      	cmp	r3, #192	; 0xc0
 8005474:	d818      	bhi.n	80054a8 <UART_SetConfig+0x1f8>
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d00a      	beq.n	8005490 <UART_SetConfig+0x1e0>
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d814      	bhi.n	80054a8 <UART_SetConfig+0x1f8>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <UART_SetConfig+0x1d8>
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d008      	beq.n	8005498 <UART_SetConfig+0x1e8>
 8005486:	e00f      	b.n	80054a8 <UART_SetConfig+0x1f8>
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e082      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005490:	2302      	movs	r3, #2
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e07e      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e07a      	b.n	8005596 <UART_SetConfig+0x2e6>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a6:	e076      	b.n	8005596 <UART_SetConfig+0x2e6>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ae:	e072      	b.n	8005596 <UART_SetConfig+0x2e6>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a35      	ldr	r2, [pc, #212]	; (800558c <UART_SetConfig+0x2dc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d12a      	bne.n	8005510 <UART_SetConfig+0x260>
 80054ba:	4b30      	ldr	r3, [pc, #192]	; (800557c <UART_SetConfig+0x2cc>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d01a      	beq.n	8005500 <UART_SetConfig+0x250>
 80054ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ce:	d81b      	bhi.n	8005508 <UART_SetConfig+0x258>
 80054d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d4:	d00c      	beq.n	80054f0 <UART_SetConfig+0x240>
 80054d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054da:	d815      	bhi.n	8005508 <UART_SetConfig+0x258>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <UART_SetConfig+0x238>
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e4:	d008      	beq.n	80054f8 <UART_SetConfig+0x248>
 80054e6:	e00f      	b.n	8005508 <UART_SetConfig+0x258>
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e052      	b.n	8005596 <UART_SetConfig+0x2e6>
 80054f0:	2302      	movs	r3, #2
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f6:	e04e      	b.n	8005596 <UART_SetConfig+0x2e6>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e04a      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005506:	e046      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e042      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a17      	ldr	r2, [pc, #92]	; (8005574 <UART_SetConfig+0x2c4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d13a      	bne.n	8005590 <UART_SetConfig+0x2e0>
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <UART_SetConfig+0x2cc>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005528:	d01a      	beq.n	8005560 <UART_SetConfig+0x2b0>
 800552a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800552e:	d81b      	bhi.n	8005568 <UART_SetConfig+0x2b8>
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005534:	d00c      	beq.n	8005550 <UART_SetConfig+0x2a0>
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d815      	bhi.n	8005568 <UART_SetConfig+0x2b8>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <UART_SetConfig+0x298>
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d008      	beq.n	8005558 <UART_SetConfig+0x2a8>
 8005546:	e00f      	b.n	8005568 <UART_SetConfig+0x2b8>
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e022      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005550:	2302      	movs	r3, #2
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e01e      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005558:	2304      	movs	r3, #4
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e01a      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005560:	2308      	movs	r3, #8
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005566:	e016      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005568:	2310      	movs	r3, #16
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556e:	e012      	b.n	8005596 <UART_SetConfig+0x2e6>
 8005570:	efff69f3 	.word	0xefff69f3
 8005574:	40008000 	.word	0x40008000
 8005578:	40013800 	.word	0x40013800
 800557c:	40021000 	.word	0x40021000
 8005580:	40004400 	.word	0x40004400
 8005584:	40004800 	.word	0x40004800
 8005588:	40004c00 	.word	0x40004c00
 800558c:	40005000 	.word	0x40005000
 8005590:	2310      	movs	r3, #16
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a9f      	ldr	r2, [pc, #636]	; (8005818 <UART_SetConfig+0x568>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d17a      	bne.n	8005696 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d824      	bhi.n	80055f2 <UART_SetConfig+0x342>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x300>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055f3 	.word	0x080055f3
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055f3 	.word	0x080055f3
 80055c0:	080055e3 	.word	0x080055e3
 80055c4:	080055f3 	.word	0x080055f3
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	080055f3 	.word	0x080055f3
 80055d0:	080055eb 	.word	0x080055eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe f85c 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80055d8:	61f8      	str	r0, [r7, #28]
        break;
 80055da:	e010      	b.n	80055fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055dc:	4b8f      	ldr	r3, [pc, #572]	; (800581c <UART_SetConfig+0x56c>)
 80055de:	61fb      	str	r3, [r7, #28]
        break;
 80055e0:	e00d      	b.n	80055fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e2:	f7fd ffbd 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80055e6:	61f8      	str	r0, [r7, #28]
        break;
 80055e8:	e009      	b.n	80055fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ee:	61fb      	str	r3, [r7, #28]
        break;
 80055f0:	e005      	b.n	80055fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80fb 	beq.w	80057fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	429a      	cmp	r2, r3
 8005614:	d305      	bcc.n	8005622 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	429a      	cmp	r2, r3
 8005620:	d903      	bls.n	800562a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005628:	e0e8      	b.n	80057fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2200      	movs	r2, #0
 800562e:	461c      	mov	r4, r3
 8005630:	4615      	mov	r5, r2
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	022b      	lsls	r3, r5, #8
 800563c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005640:	0222      	lsls	r2, r4, #8
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	6849      	ldr	r1, [r1, #4]
 8005646:	0849      	lsrs	r1, r1, #1
 8005648:	2000      	movs	r0, #0
 800564a:	4688      	mov	r8, r1
 800564c:	4681      	mov	r9, r0
 800564e:	eb12 0a08 	adds.w	sl, r2, r8
 8005652:	eb43 0b09 	adc.w	fp, r3, r9
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fa fdae 	bl	80001c8 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567a:	d308      	bcc.n	800568e <UART_SetConfig+0x3de>
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005682:	d204      	bcs.n	800568e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	60da      	str	r2, [r3, #12]
 800568c:	e0b6      	b.n	80057fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005694:	e0b2      	b.n	80057fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d15e      	bne.n	800575e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80056a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d828      	bhi.n	80056fa <UART_SetConfig+0x44a>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x400>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7fd ffdc 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61f8      	str	r0, [r7, #28]
        break;
 80056da:	e014      	b.n	8005706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7fd ffee 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 80056e0:	61f8      	str	r0, [r7, #28]
        break;
 80056e2:	e010      	b.n	8005706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b4d      	ldr	r3, [pc, #308]	; (800581c <UART_SetConfig+0x56c>)
 80056e6:	61fb      	str	r3, [r7, #28]
        break;
 80056e8:	e00d      	b.n	8005706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7fd ff39 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80056ee:	61f8      	str	r0, [r7, #28]
        break;
 80056f0:	e009      	b.n	8005706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	61fb      	str	r3, [r7, #28]
        break;
 80056f8:	e005      	b.n	8005706 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d077      	beq.n	80057fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005a      	lsls	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	441a      	add	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b0f      	cmp	r3, #15
 8005726:	d916      	bls.n	8005756 <UART_SetConfig+0x4a6>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572e:	d212      	bcs.n	8005756 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f023 030f 	bic.w	r3, r3, #15
 8005738:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	b29b      	uxth	r3, r3
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	b29a      	uxth	r2, r3
 8005746:	8afb      	ldrh	r3, [r7, #22]
 8005748:	4313      	orrs	r3, r2
 800574a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	8afa      	ldrh	r2, [r7, #22]
 8005752:	60da      	str	r2, [r3, #12]
 8005754:	e052      	b.n	80057fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800575c:	e04e      	b.n	80057fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005762:	2b08      	cmp	r3, #8
 8005764:	d827      	bhi.n	80057b6 <UART_SetConfig+0x506>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <UART_SetConfig+0x4bc>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005791 	.word	0x08005791
 8005770:	08005799 	.word	0x08005799
 8005774:	080057a1 	.word	0x080057a1
 8005778:	080057b7 	.word	0x080057b7
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057b7 	.word	0x080057b7
 8005784:	080057b7 	.word	0x080057b7
 8005788:	080057b7 	.word	0x080057b7
 800578c:	080057af 	.word	0x080057af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005790:	f7fd ff7e 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8005794:	61f8      	str	r0, [r7, #28]
        break;
 8005796:	e014      	b.n	80057c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005798:	f7fd ff90 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 800579c:	61f8      	str	r0, [r7, #28]
        break;
 800579e:	e010      	b.n	80057c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a0:	4b1e      	ldr	r3, [pc, #120]	; (800581c <UART_SetConfig+0x56c>)
 80057a2:	61fb      	str	r3, [r7, #28]
        break;
 80057a4:	e00d      	b.n	80057c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a6:	f7fd fedb 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80057aa:	61f8      	str	r0, [r7, #28]
        break;
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b2:	61fb      	str	r3, [r7, #28]
        break;
 80057b4:	e005      	b.n	80057c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057c0:	bf00      	nop
    }

    if (pclk != 0U)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	085a      	lsrs	r2, r3, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b0f      	cmp	r3, #15
 80057e0:	d909      	bls.n	80057f6 <UART_SetConfig+0x546>
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d205      	bcs.n	80057f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60da      	str	r2, [r3, #12]
 80057f4:	e002      	b.n	80057fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005808:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800580c:	4618      	mov	r0, r3
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005816:	bf00      	nop
 8005818:	40008000 	.word	0x40008000
 800581c:	00f42400 	.word	0x00f42400

08005820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01a      	beq.n	8005936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591e:	d10a      	bne.n	8005936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b098      	sub	sp, #96	; 0x60
 8005968:	af02      	add	r7, sp, #8
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005974:	f7fb fb6c 	bl	8001050 <HAL_GetTick>
 8005978:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b08      	cmp	r3, #8
 8005986:	d12e      	bne.n	80059e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005990:	2200      	movs	r2, #0
 8005992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f88c 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d021      	beq.n	80059e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b6:	653b      	str	r3, [r7, #80]	; 0x50
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
 80059c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e6      	bne.n	80059a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e062      	b.n	8005aac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d149      	bne.n	8005a88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f856 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03c      	beq.n	8005a88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e6      	bne.n	8005a0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a60:	61fa      	str	r2, [r7, #28]
 8005a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69b9      	ldr	r1, [r7, #24]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e011      	b.n	8005aac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3758      	adds	r7, #88	; 0x58
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	e049      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d045      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fb fabf 	bl	8001050 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e048      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d031      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d110      	bne.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f838 	bl	8005b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2208      	movs	r2, #8
 8005b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e029      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b34:	d111      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f81e 	bl	8005b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e00f      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d0a6      	beq.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b095      	sub	sp, #84	; 0x54
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8005baa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e6      	bne.n	8005b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d118      	bne.n	8005c2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f023 0310 	bic.w	r3, r3, #16
 8005c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6979      	ldr	r1, [r7, #20]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	613b      	str	r3, [r7, #16]
   return(result);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e6      	bne.n	8005bf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c3e:	bf00      	nop
 8005c40:	3754      	adds	r7, #84	; 0x54
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <memset>:
 8005c4a:	4402      	add	r2, r0
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d100      	bne.n	8005c54 <memset+0xa>
 8005c52:	4770      	bx	lr
 8005c54:	f803 1b01 	strb.w	r1, [r3], #1
 8005c58:	e7f9      	b.n	8005c4e <memset+0x4>
	...

08005c5c <__libc_init_array>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4d0d      	ldr	r5, [pc, #52]	; (8005c94 <__libc_init_array+0x38>)
 8005c60:	4c0d      	ldr	r4, [pc, #52]	; (8005c98 <__libc_init_array+0x3c>)
 8005c62:	1b64      	subs	r4, r4, r5
 8005c64:	10a4      	asrs	r4, r4, #2
 8005c66:	2600      	movs	r6, #0
 8005c68:	42a6      	cmp	r6, r4
 8005c6a:	d109      	bne.n	8005c80 <__libc_init_array+0x24>
 8005c6c:	4d0b      	ldr	r5, [pc, #44]	; (8005c9c <__libc_init_array+0x40>)
 8005c6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ca0 <__libc_init_array+0x44>)
 8005c70:	f000 f818 	bl	8005ca4 <_init>
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	2600      	movs	r6, #0
 8005c7a:	42a6      	cmp	r6, r4
 8005c7c:	d105      	bne.n	8005c8a <__libc_init_array+0x2e>
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c84:	4798      	blx	r3
 8005c86:	3601      	adds	r6, #1
 8005c88:	e7ee      	b.n	8005c68 <__libc_init_array+0xc>
 8005c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8e:	4798      	blx	r3
 8005c90:	3601      	adds	r6, #1
 8005c92:	e7f2      	b.n	8005c7a <__libc_init_array+0x1e>
 8005c94:	08005d0c 	.word	0x08005d0c
 8005c98:	08005d0c 	.word	0x08005d0c
 8005c9c:	08005d0c 	.word	0x08005d0c
 8005ca0:	08005d10 	.word	0x08005d10

08005ca4 <_init>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr

08005cb0 <_fini>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr
